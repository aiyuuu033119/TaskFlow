name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: 8

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check Prettier formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run security checks
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Job 3: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: security
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL || 'file:./dev.db' }}" >> .env
          echo "DIRECT_URL=${{ secrets.DIRECT_URL || 'file:./dev.db' }}" >> .env
          echo "NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL || 'http://localhost:3000' }}" >> .env

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Next.js application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next
          retention-days: 7

  # Job 4: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Create .env.test file
        run: |
          echo "DATABASE_URL=file:./test.db" >> .env.test

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run unit tests
        run: npm test -- --coverage --passWithNoTests
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 5: E2E Tests
  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: build
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps

  #     - name: Create .env file
  #       run: |
  #         echo "DATABASE_URL=file:./e2e.db" >> .env

  #     - name: Generate Prisma Client
  #       run: npx prisma generate

  #     - name: Run database migrations
  #       run: npx prisma migrate deploy

  #     - name: Run E2E tests
  #       run: npm run test:e2e
  #       env:
  #         CI: true

  #     - name: Upload Playwright report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  # Job 6: Lighthouse CI
  # lighthouse:
  #   name: Lighthouse Performance Check
  #   runs-on: ubuntu-latest
  #   needs: build
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Create .env file
  #       run: |
  #         echo "DATABASE_URL=file:./lighthouse.db" >> .env

  #     - name: Generate Prisma Client
  #       run: npx prisma generate

  #     - name: Build application
  #       run: npm run build

  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v11
  #       with:
  #         urls: |
  #           http://localhost:3000
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true

  # Job 7: Deploy Preview (for PRs)
  # deploy-preview:
  #   name: Deploy Preview
  #   runs-on: ubuntu-latest
  #   needs: [build, unit-tests]
  #   if: github.event_name == 'pull_request'
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to Vercel Preview
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 8: Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release